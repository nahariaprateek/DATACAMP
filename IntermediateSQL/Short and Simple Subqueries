WHERE are the Subqueries?
—————————————————

USE of simple subqueries to extract and transform your data

A query nested inside another query  is a subquery

SELECT column
FROM (SELECT column 
		FROM table) AS  subquery


Any part - of the query it can be placed
SELECT, FROM , WHERE , GROUP BY

can return a variety of information 
- Scaler quantities (3.14, -2, 0.001)
- A list (id = (12,25,392,401, 939))
- A table 


Why Subqueries

Comparing groups to summarised values 

Reshape your data

Combining data that cannot be joined 




Simple Subqueries 
———————————

can be evaluated independently from the outer query 

SELECT home_goal
FROM match
WHERE home_goal > ( 
	SELECT AVG(home_goal)
	FROM match);
SELECT AVG(home_goal) FROM match;


this is processed once in the entire statement

inner to outer it goes 

outer query treats inner as single aggregate value once it is processed.


Subqueries in the WHERE clause

SELECT AVG(home_goal) FROM match;


//

SELECT date, hometeam_id, awayteam_id, home_goal, away_goal 
FROM match
WHERE season = ‘2012/2013’
	AND home_goal > (SELECT AVG(home_goal) FROM match);


Subquery filtering list with IN

WHICH teams are part of polands league 

SELECT team_long_name,
team_short_name AS abbr
FROM team
WHERE
	team_api_id IN
	(SELECT hometeam_id 
	FROM match
	WHERE country_id = 15722);

	
LETS PRACTICE
———————————————


-- Select the average of home + away goals, multiplied by 3
SELECT 
    3 * AVG(home_goal + away_goal)
FROM matches_2013_2014;



SELECT 
    -- Select the date, home goals, and away goals scored
    date,
    home_goal,
    away_goal
FROM  matches_2013_2014
-- Filter for matches where total goals exceeds 3x the average
WHERE (home_goal + away_goal) > 
       (SELECT 3 * AVG(home_goal + away_goal)
        FROM matches_2013_2014); 



SELECT 
    -- Select the team long and short names
    team_long_name,
    team_short_name
FROM team 
-- Exclude all values from the subquery
WHERE team_api_id NOT IN
     (SELECT DISTINCT hometeam_ID  FROM match);




SELECT
    -- Select the team long and short names
    team_long_name,
    team_short_name
FROM team
-- Filter for teams with 8 or more home goals
WHERE team_api_id IN
      (SELECT hometeam_ID 
       FROM match
       WHERE home_goal >= 8);





Subqueries in the FROM statement
—————————————————


Subqueries in FROM 

Restructure and Transform your data

pre filtering data


They are also useful for calculating aggregates of aggregates

which 3 teams has the highest average of home goals scored?

1. Cal the AVG for each team
2. Get the 3 highest of the AVG values 


This can be easily obtained by subqueries 

SELECT team, home_avg
FROM (SELECT
	t.team_long_name AS team,
	AVG(m.home_goal) AS home_avg
	FROM match AS m 
	LEFT JOIN team AS t
	ON m.hometeam_id = t.team_api_id
	WHERE season = ‘2011/2012’
	GROUP BY team) AS subquery

ORDER BY home_avg DESC
LIMIT 3;



Things to remember 

you can create multiple subqueries in one from statement 

Always put alias to the
always JOIN them

you can join a subquery to any existing table in the database

LETS Practice
————————
SELECT 
    -- Select the country ID and match ID
    country_id, 
    id 
FROM match
-- Filter for matches with 10 or more goals in total
WHERE (home_goal + away_goal) >= 10;



SELECT
    c.name AS country_name,
    COUNT(sub.id) AS matches
FROM country AS c
INNER JOIN (SELECT country_id, id 
            FROM match
            WHERE (home_goal + away_goal) >= 10 ) AS sub
ON c.id = sub.country_id
GROUP BY country_name;



SELECT
    country,
    date,
    home_goal,
    away_goal
FROM 
    (SELECT c.name AS country, 
            m.date, 
            m.home_goal, 
            m.away_goal,
           (    m.home_goal + m.away_goal) AS total_goals
    FROM match AS m
    LEFT JOIN country AS c
    ON m.country_id = c.id) AS subq
WHERE total_goals >= 10;







SUBQUERIES In SELECT


returns a single value
used in mathematical calculations
	- deviation from the average

Subqueries in SELECT

- calculate the total matches across all seasons
- 
- SELECT COUNT(id) FROM match;

SELECT
	season,
	COUNT(id) AS matches,
	12837 as total_matches
FROM match
GROUP BY season;


or we can skip the first step and write down the query in a single go using the subquery.

ANS SELECT
	season,
	COUNT(id) AS matches,
	(SELECT COUNT(id) FROM match) as total_matches
FROM match 
GROUP BY season;












SELECT subqueries for mathematical calculation


￼


Simply using the subqueries 

SELECT
date,
(home_goal + away_goal) AS goals,
(home_goal + away_goal) - 
	(SELECT AVG(home_goal + away_goal)
FROM match
	WHERE season = ‘2011/2012’) AS diff 
	FROM match 
	WHERE season = ‘2011/2012’;


 // this saves a lot of time and effort




Things to keep in mind 
—
Subquery needs to return single value 
otherwise - Error 

Make sure you have all filters in the right places 
	Properly filter both the main and the subquery 

since subquery will process first always 

LETS PRACTICE 
————————————


SELECT 
    l.name AS league,
    -- Select and round the league's total goals
    ROUND(AVG(m.home_goal + m.away_goal), 2) AS avg_goals,
    -- Select & round the average total goals for the season
    (SELECT ROUND(AVG(home_goal + away_goal), 2) 
     FROM match
     WHERE season = '2013/2014') AS overall_avg
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Filter for the 2013/2014 season
WHERE season = '2013/2014'
GROUP BY l.name;





SELECT
    -- Select the league name and average goals scored
    l.name AS league,
    ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Subtract the overall average from the league average
    ROUND(AVG(m.home_goal + m.away_goal) - 
        (SELECT AVG(home_goal + away_goal)
         FROM match 
         WHERE season = '2013/2014'),2) AS diff
FROM league AS l
LEFT JOIN match AS m
ON l.country_id = m.country_id
-- Only include 2013/2014 results
WHERE season = '2013/2014'
GROUP BY l.name;







Subqueries with multiple classes in SELECT, FROM, WHERE


we can have the combination of SELECT, FROM, & WHERE 

Best Practice 
-
Format your queries

Line up SELECT, FROM, WHERE & GROUP BY

SELECT
 	gad,
	dsf,
	dfa
FROM table1 
WHERE gad = 2;


Annotate your queries 
——————
use comments 

/* gakjngkakngadlghakgklsagskjgsdjlgh */


you can also use the inline comment 
 
double dash 


Indent your queries



Is that subquery necessary 
- Subquery requires computing power
- How big is your database
- how big is the table youre querying from?

Is the subquery actually necessary?

 Properly filter each subquery 
at every subquery and main query 



LETS PRACTICE

SELECT 
    -- Select the stage and average goals for each stage
    m.stage,
    ROUND(AVG(m.home_goal + m.away_goal),2) AS avg_goals,
    -- Select the average overall goals for the 2012/2013 season
    ROUND((SELECT AVG(home_goal + away_goal) 
           FROM match 
           WHERE season = '2012/2013'),2) AS overall
FROM match AS m
-- Filter for the 2012/2013 season
WHERE season = '2012/2013'
-- Group by stage
GROUP BY m.stage;





SELECT 
    -- Select the stage and average goals from the subquery
    s.stage,
    ROUND(s.avg_goals,2) AS avg_goals
FROM 
    -- Select the stage and average goals in 2012/2013
    (SELECT
         stage,
         AVG(home_goal + away_goal) AS avg_goals
     FROM match
     WHERE season = '2012/2013'
     GROUP BY stage) AS s
WHERE 
    -- Filter the main query using the subquery
    s.avg_goals > (SELECT AVG(home_goal + away_goal) 
                    FROM match WHERE season = '2012/2013');


—

SELECT 
    -- Select the stage and average goals from s
    s.stage,
    ROUND(s.avg_goals,2) AS avg_goal,
    -- Select the overall average for 2012/2013
    (SELECT AVG(home_goal + away_goal) FROM match WHERE season = '2012/2013') AS overall_avg
FROM 
    -- Select the stage and average goals in 2012/2013 from match
    (SELECT
         stage,
         AVG(home_goal + away_goal) AS avg_goals
     FROM match
     WHERE season = '2012/2013'
     GROUP BY stage) AS s
WHERE 
    -- Filter the main query using the subquery
    s.avg_goals > (SELECT AVG(home_goal + away_goal) 
                    FROM match WHERE season = '2012/2013');





