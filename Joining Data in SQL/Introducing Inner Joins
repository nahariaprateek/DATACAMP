Joining Data in SQL

Introducing Inner Joins


The ins and outs of INNER JOIN

￼



￼


OUR FIRST INNER JOIN

SELECT prime_ministers.country, prime_ministers.continent, prime_minister,president
FROM prime_ministers
INNER JOIN presidents
ON prime_minister.country = presidents.country;


Aliasing tables
————————
SELECT p1.country, p1.continent, prime_minister, president
FROM prime_ministers AS p1
INNER JOIN presidents AS p2
ON p1.country = p2.country


OR simply 


SELECT p1.country, p1.continent, prime_minister, president
FROM prime_ministers AS p1
INNER JOIN presidents AS p2
USING(country);

Note - when using or joining two identical column names  - USING keyword 


LETS PRACTICE

Your First Join 

SELECT * 
FROM cities
-- Inner join to countries
INNER JOIN countries
-- Match on country codes
ON cities.country_code = countries.code



-- 1. Select name fields (with alias) and region 
SELECT cities.name AS city, countries.name AS country, region
FROM cities
INNER JOIN countries
ON cities.country_code = countries.code;




-- 3. Select fields with aliases
SELECT c.code AS country_code, name, year, inflation_rate
FROM countries AS c
-- 1. Join to economies (alias e)
INNER JOIN economies AS e
-- 2. Match on code
ON c.code = e.code;





USING in action


SELECT c.name AS country, l.name AS language, official
FROM countries AS c
INNER JOIN languages AS l
-- Match using the code column
USING(code);


Defining relationships


One to Many 
One to One
Many to Many


-- Select country and language names, aliased
SELECT c.name AS country, l.name AS language
-- From countries (aliased)
FROM countries AS c
-- Join to languages (aliased)
INNER JOIN languages AS l
-- Use code as the joining field with the USING keyword
USING(code);



-- Select language and country names, aliased
SELECT l.name AS language, c.name AS country
FROM countries AS c
INNER JOIN languages AS l
USING(code)
-- Order the results by language
ORDER BY language;



Multiple joins

SELECT *
FROM left_table
INNER JOIN right_table
ON left_table.id = right_table.id
INNER JOIN another_table
ON left_table.id = another_table.id;

left table = right table = another table



FIRST JOIN 
SELECT p1.country, p1.continent,
	president, prime_minister
FROM prime_minister as p1
	INNER JOIN presidents as p2
USING (country);

INNER JOIN prime_minister_terms as p3
	USING(prime_minister);
￼


￼


SELECT *
	FROM left_tabel
INNER JOIN right_table
ON left_table.id = right_table.id
	AND left_table.date = right_table.date;



LEFTS practice


Joining multiple tables


-- Select relevant fields
SELECT name, year, fertility_rate
-- Inner join countries and populations, aliased, on code
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code;

-- Select fields
SELECT name, e.year, fertility_rate, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
-- Join to economies (as e)
INNER JOIN economies AS e
-- Match on country code
ON c.code = e.code;


SELECT name, e.year, fertility_rate, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
INNER JOIN economies AS e
ON c.code = e.code
-- Add an additional joining condition such that you are also joining on year
    AND p.year = e.year;



—————————————————————————————————————————


