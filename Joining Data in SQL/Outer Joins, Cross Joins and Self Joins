
JOINING DATA IN SQL 
CHAPTER 2 

Outer Joins, Cross Joins and Self Joins
|
|
|
LEFT and RIGHT JOIN 


SELECT p1.country, prime_minister, president
FROM prime_ministers AS p1
LEFT JOIN presidents AS p2
USING(country);


LEFT JOIN can also be written as LEFT OUTER JOIN



RIGHT JOIN
Generic syntax

SELECT *
FROM left_table
RIGHT JOIN right_table
ON left_table.id = right_table.id;




LEts Practice

SELECT 
    c1.name AS city,
    code,
    c2.name AS country,
    region,
    city_proper_pop
FROM cities AS c1
-- Perform an inner join with cities as c1 and countries as c2 on country code
INNER JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;



SELECT 
    c1.name AS city, 
    code, 
    c2.name AS country,
    region, 
    city_proper_pop
FROM cities AS c1
-- Join right table (with alias)
LEFT JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;




BUILDING ON your LEFT JOIN

SELECT name, region, gdp_percapita
FROM countries AS c
LEFT JOIN economies AS e
-- Match on code fields
ON c.code = e.code
-- Filter for the year 2010
WHERE year = 2010;


-- Select region, and average gdp_percapita as avg_gdp
SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
-- Group by region
GROUP BY region;



SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
GROUP BY region
-- Order by descending avg_gdp
ORDER BY avg_gdp DESC 
-- Return only first 10 records
LIMIT 10;




Is this RIGHT?
-- Modify this query to use RIGHT JOIN instead of LEFT JOIN
SELECT countries.name AS country, languages.name AS language, percent
FROM languages
RIGHT JOIN countries
USING(code)
ORDER BY language;






FULL JOINS 
——————
SYNTAX

SELECT left_table.id AS L_id,
		right_table.id AS R_id,
		left_table.id AS L_val,
		right_table.di AS R_val
FROM left_table
FULL JOIN right_table
USING(id);


SELECT p1.country AS country, prime_minister, president
FROM prime_ministers AS p1
FULL JOIN presidents AS p2
ON p1.country = p2.country
LIMIT 10;



COMPARING JOINS 
——
SELECT name AS country, code, region, basic_unit
FROM countries
-- Join to currencies
FULL JOIN currencies 
USING (code)
-- Where region is North America or name is null
WHERE region = 'North America' OR region IS NULL 
ORDER BY region;



SELECT name AS country, code, region, basic_unit
FROM countries
-- Join to currencies
LEFT JOIN currencies 
USING (code)
WHERE region = 'North America' 
    OR name IS NULL
ORDER BY region;


SELECT name AS country, code, region, basic_unit
FROM countries
-- Join to currencies
INNER JOIN currencies 
USING (code)
WHERE region = 'North America' 
    OR name IS NULL
ORDER BY region;


——
CHAINING FULL JOINS

SELECT 
    c1.name AS country, 
    region, 
    l.name AS language,
    basic_unit, 
    frac_unit
FROM countries as c1 
-- Full join with languages (alias as l)
FULL JOIN languages AS l 
USING(code)
-- Full join with currencies (alias as c2)
FULL JOIN currencies AS c2
USING(code)
WHERE region LIKE 'M%esia';




Crossing into CROSS JOIN
———————————————



￼


SYNTAX

SELECT id1, id2
FROM table1
CROSS JOIN table2;

	

EXAMPle

SELECT prime_minister, presidents
FROM prime_ministers AS p1
CROSS JOIN presidents AS p2
	WHERE p1.continent IN (‘Asia’)
	AND p2.continent IN (‘South America’);



LETS PRACTICE 
———————————

SELECT c.name AS country, l.name AS language
-- Inner join countries as c with languages as l on code
FROM countries AS c 
INNER JOIN languages AS l 
USING(code)
WHERE c.code IN ('PAK','IND')
    AND l.code in ('PAK','IND');



SELECT c.name AS country, l.name AS language
FROM countries AS c        
-- Perform a cross join to languages (alias as l)
CROSS JOIN languages AS l 
WHERE c.code in ('PAK','IND')
    AND l.code in ('PAK','IND');



——

Choosing your join


SELECT 
    c.name AS country,
    region,
    life_expectancy AS life_exp
FROM countries AS c
-- Join to populations (alias as p) using an appropriate join
INNER JOIN populations AS p  
ON c.code = p.country_code
-- Filter for only results in the year 2010
WHERE year = 2010
-- Sort by life_exp
ORDER BY life_exp ASC
-- Limit to five records
LIMIT 5;




———————
SELF JOINS 

Tables joined with themselves
they can be used to compare parts of the same table
Aliasing is required for the self join 


SELECT 
	p1.country AS country1,
	p2.country AS country2,
	p1.continent
FROM prime_ministers AS p1
	INNER JOIN prime_ministers AS p2
ON p1.continent = p2.continent
LIMIT 10;



SELECT 
	p1.country AS country1,
	p2.country AS country2,
	p1.continent
FROM prime_ministers AS p1
	INNER JOIN prime_ministers AS p2
ON p1.continent = p2.continent
	AND p1.country <> p2.country;

LETS PRACTICE
————————

-- Select aliased fields from populations as p1
SELECT 
    p1.country_code, 
    p1.size AS size2010, 
    p2.size AS size2015
-- Join populations as p1 to itself, alias as p2, on country code
FROM populations AS p1
INNER JOIN populations AS p2
USING(country_code);


SELECT 
    p1.country_code, 
    p1.size AS size2010, 
    p2.size AS size2015
FROM populations AS p1
INNER JOIN populations AS p2
ON p1.country_code = p2.country_code
WHERE p1.year = 2010
-- Filter such that p1.year is always five years before p2.year
    AND p1.year = (p2.year - 5)



  
