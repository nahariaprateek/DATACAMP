Registrations and active users


User Centric KPIs
KPIs

Benefits - they measure performance well in B2Cs

Registrations - overview 

Registrations - setup

In order to get how many registrations in a month 


WITH reg_dates AS (
SELECT 
	user_id,
	MIN(order_date) AS reg_date
FROM orders
GROUP BY user_id)

SELECT 
	DATE_TRUNC(‘month’, reg_date) :: DATE AS delivr_month,
COUNT(DISTINCT user_id) AS regs
FROM regs_date
GROUP BY delivr_month
ORDER BY delivr_month ASC
LIMIT 3;




Active Users query 

SELECT 
	DATE_TRUNC(‘month’, reg_date) :: DATE AS delivr_month,
COUNT(DISTINCT user_id) AS mau
FROM orders
GROUP BY delivr_month
ORDER BY delivr_month ASC
LIMIT 3;



LETS PRACTICE
——————————

SELECT
  -- Get the earliest (minimum) order date by user ID
  user_id,
  MIN(order_date) AS reg_date
FROM orders
GROUP BY user_id
-- Order by user ID
ORDER BY user_id ASC;



-- Wrap the query you wrote in a CTE named reg_dates
WITH reg_dates AS (
  SELECT
    user_id,
    MIN(order_date) AS reg_date
  FROM orders
  GROUP BY user_id)

SELECT
  -- Count the unique user IDs by registration month
  DATE_TRUNC('month', reg_date) :: DATE AS delivr_month,
  COUNT(DISTINCT user_id) AS regs
FROM reg_dates
GROUP BY delivr_month
ORDER BY delivr_month ASC; 


MONTHLY ACTIVE USERS (MAU)
SELECT
  -- Truncate the order date to the nearest month
  DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
  -- Count the unique user IDs
  COUNT(DISTINCT user_id) AS mau
FROM orders
GROUP BY delivr_month
-- Order by month
ORDER BY delivr_month ASC;



Window functions
|
|
|
Calculating growth of active users - window functions will be used 

Running total 
cumulative sum of all the variables 


USE CTE with OVER (windows functions)


CTE1,
CTE2

SELECT 
	delivr_month,
	regs,
	sum(regs) OVER (ORDER BY delivr_month ASC) AS regs_rt
FROM registrations
ORDER BY delivr_month ASC LIMIT 3;

￼





LETS PRACTICE 

WITH reg_dates AS (
  SELECT
    user_id,
    MIN(order_date) AS reg_date
  FROM orders
  GROUP BY user_id),

  regs AS (
  SELECT
    DATE_TRUNC('month', reg_date) :: DATE AS delivr_month,
    COUNT(DISTINCT user_id) AS regs
  FROM reg_dates
  GROUP BY delivr_month)

SELECT
  -- Calculate the registrations running total by month
  delivr_month,
  SUM(regs) OVER (ORDER BY delivr_month ASC) AS regs_rt
FROM regs
-- Order by month in ascending order
ORDER BY delivr_month ASC; 



MAU monitor (I)
WITH mau AS (
  SELECT
    DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
    COUNT(DISTINCT user_id) AS mau
  FROM orders
  GROUP BY delivr_month)

SELECT
  -- Select the month and the MAU
  delivr_month,
  mau,
 COALESCE(
    LAG(mau) OVER (ORDER BY delivr_month ASC),
0)  AS last_mau
FROM mau
-- Order by month in ascending order
ORDER BY delivr_month ASC;






Growth
Deltas - query 
A simple difference between two values 

Current and previous month active users


First MAU CTE 
———————

WITH maus AS (
	SELECT
	DATE_TRUNC(‘month’, order_date) :: DATE AS delivr_month,
	COUNT(DISTINCT user_id) AS may
FROM orders
GROUP BY delivr_month
),

MAU’s LAG
——————

maus_lag AS (
SELECT
	delivr_month,
	mau,
	COALESCE(
		LAG(mau) OVER (ORDER BY delivr_month ASC), 1) AS last_mau
FROM maus)


Now calculating the deltas
——————————————

SELECT 
	delivr_month,	
	mau,
	mau - last_mau AS mau_delta
FROM maus_lag
ORDER BY delivr_month
LIMIT 3;


Deltas - Pitfalls
- Raw, absolute number
- Only shows one of three things about a variable
    - Decreasing if sum< 0
    - Stable if value = 0
    - increasing if value > 0

Growth Rate
It the change in the variable percentage

current value - previous value / previous value


Final Growth query 

WITH maus AS (),
maus_lag SA()

SELECT 
	delivr_month,
	mau,
	ROUND(
	(mau - last_mau) :: NUMERIC / last_mau, 2) AS growth
FROM maus_lag
	ORDER BY delivr_month
	LIMIT 3;



LETS PRACTICE
————————

GROWTH
2.8 MAU monitor (2)
Instruction:
* Fetch the previous month’s MAU in the mau_with_lag CTE…
* Select the month and the delta between its MAU and the previous month’s MAU.
* Order by month in ascending order.



WITH mau AS (
  SELECT
    DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
    COUNT(DISTINCT user_id) AS mau
  FROM orders
  GROUP BY delivr_month),

  mau_with_lag AS (
  SELECT
    delivr_month,
    mau,
    -- Fetch the previous month's MAU
    COALESCE(
      LAG(mau) OVER (ORDER BY delivr_month ASC),
    0) AS last_mau
  FROM mau)

SELECT
  -- Calculate each month's delta of MAUs
  delivr_month,
  mau - last_mau AS mau_delta
FROM mau_with_lag
-- Order by month in ascending order
ORDER BY delivr_month;






MAU monitor (III)



WITH mau AS (
  SELECT
    DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
    COUNT(DISTINCT user_id) AS mau
  FROM orders
  GROUP BY delivr_month),

  mau_with_lag AS (
  SELECT
    delivr_month,
    mau,
    GREATEST(
      LAG(mau) OVER (ORDER BY delivr_month ASC),
    1) AS last_mau
  FROM mau)

SELECT
  -- Calculate the MoM MAU growth rates
  delivr_month,
  ROUND(
  (mau - last_mau) :: NUMERIC / last_mau,
  2) AS growth
FROM mau_with_lag
-- Order by month in ascending order
ORDER BY delivr_month;






WITH orders AS (
  SELECT
    DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
    --  Count the unique order IDs
    COUNT(DISTINCT order_id) AS orders
  FROM orders
  GROUP BY delivr_month),

  orders_with_lag AS (
  SELECT
    delivr_month,
    -- Fetch each month's current and previous orders
    orders,
    COALESCE(
      LAG(orders) OVER (ORDER BY delivr_month ASC),
    1) AS last_orders
  FROM orders)

SELECT
  delivr_month,
  -- Calculate the MoM order growth rate
  ROUND(
    (orders - last_orders) :: NUMERIC / last_orders,
  2) AS growth
FROM orders_with_lag
ORDER BY delivr_month ASC;




Retention

——————

Query 
WITH user_activity AS (
	SELECT DISTINCT
	DATE_TRUNC(‘month’, order_date) :: DATE AS delivr_month,
	user_id
FROM orders)

SELECT
	previous.deliver_month,
	ROUND(
			COUNT(DISTINCT current.user_id) :: NUMERIC / 
	GREATEST(COUNT(DISTINCT previous.user_id), 1),2) AS retention


FROM user_activity AS previous
LEFT JOIN user_activity AS current
	ON previous.user_id  = current.user_id
AND previous.delivr_month = (current.delivr_month - INTERVAL ‘1 month’)
GROUP BY previous.delivr_month
ORDER BY previous.delivr_month ASC
LIMIT 3;



LETS PRACTICE 
————————

WITH user_monthly_activity AS (
  SELECT DISTINCT
    DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
    user_id
  FROM orders)

SELECT

  -- Calculate the MoM retention rates

  previous.delivr_month,
  ROUND(
  COUNT(DISTINCT current.user_id) :: NUMERIC /
  GREATEST(COUNT(DISTINCT previous.user_id), 1),
  2) AS retention_rate
FROM user_monthly_activity AS previous
LEFT JOIN user_monthly_activity AS current
-- Fill in the user and month join conditions
ON previous.user_id = current.user_id
AND previous.delivr_month = (current.delivr_month - INTERVAL '1 month')
GROUP BY previous.delivr_month
ORDER BY previous.delivr_month ASC;



