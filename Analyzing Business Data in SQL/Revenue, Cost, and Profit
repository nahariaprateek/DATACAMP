Course :- Analyzing Busine
ss Data in SQL
--Chapter wise SQL queries


Calculating revenue 

SELECT
	order_id,
	SUM(meal_price * order_quantity) AS revenue
FROM meals
JOIN orders ON meals.meal_id = orders.meals_id
GROUP BY order_id;

Working with dates 
DATE_TRUNC(date_part, date)

DATE_TRUNC(‘month’, ‘2018-06-12’)  :: DATE -> 2018-06-01
DATE_TRUNC(‘week’, ‘2018-06-12’)  :: DATE -> 2018-06-11




LETS PRACTICE 
—————————

Revenue per customer 

-- Calculate revenue
SELECT SUM(order_quantity * meal_price) AS revenue
  FROM meals
  JOIN orders ON meals.meal_id = orders.meal_id
-- Keep only the records of customer ID 15
WHERE user_id = 15;



revenue
271

n


Revenue per week

SELECT DATE_TRUNC('week', order_date) :: DATE AS delivr_week,
       -- Calculate revenue
       SUM(meal_price * order_quantity) AS revenue
  FROM meals
  JOIN orders ON meals.meal_id = orders.meal_id
-- Keep only the records in June 2018
WHERE DATE_TRUNC('month', order_date) :: DATE = '2018-06-01'
GROUP BY delivr_week
ORDER BY delivr_week ASC;



Cost and CTE’s 




WITH table_1 AS
	(SELECT ….
		FROM … ),
	table_2 AS
	(SELECT …
			FROM …)

SELECT
FROM table_1 
JOIN table_2 ON …. 
…..


WITH costs_and_quantities AS (
	SELECT
		meals.meal_id,
		SUM(stocked_quantity) AS quantity,
		SUM (meal_cost * stocked_quantity) AS cost 

FROM meals
JOIN stock ON meals.meal_id = stock.meal_id
GROUP BY meals.meal_id
)


SELECT 
	meal_id
	quantity
	cost
FROM costs_and_quantities 
ORDER BY cost DESC
LIMIT 3;



TOP Meals by Cost


SELECT
  -- Calculate cost per meal ID
  meals.meal_id,
  SUM(meal_cost * stocked_quantity) AS cost
FROM meals
JOIN stock ON meals.meal_id = stock.meal_id
GROUP BY meals.meal_id
ORDER BY cost DESC
-- Only the top 5 meal IDs by purchase cost
LIMIT 5;




Calculate cost per month 
———————————————

SELECT
  -- Calculate cost
  DATE_TRUNC('month', stocking_date)::DATE AS delivr_month,
  SUM(meal_cost * stocked_quantity) AS cost
FROM meals
JOIN stock ON meals.meal_id = stock.meal_id
GROUP BY delivr_month
ORDER BY delivr_month ASC;



-- Declare a CTE named monthly_cost
WITH monthly_cost AS (
  SELECT
    DATE_TRUNC('month', stocking_date)::DATE AS delivr_month,
    SUM(meal_cost * stocked_quantity) AS cost
  FROM meals
  JOIN stock ON meals.meal_id = stock.meal_id
  GROUP BY delivr_month)

SELECT *
FROM monthly_cost;




-- Declare a CTE named monthly_cost
WITH monthly_cost AS (
  SELECT
    DATE_TRUNC('month', stocking_date)::DATE AS delivr_month,
    SUM(meal_cost * stocked_quantity) AS cost
  FROM meals
  JOIN stock ON meals.meal_id = stock.meal_id
  GROUP BY delivr_month)

SELECT
  -- Calculate the average monthly cost before September
  AVG(cost)
FROM monthly_cost
WHERE delivr_month < '2018-09-01';




PROFIT
————

HERE in this module :-

We are using CTE’s to calculate profit 
and
Profit = revenue - cost 

revenue = SUM(meal_cost * quantity_ordered)
cost = SUM(meal_price * quantity_stocked)

——————————————
WITH revenue AS (
	SELECT
		meals.meal_id,
		SUM(meal_price * meal_quantity) AS revenue
FROM meals
JOIN orders ON meals.meal_id = orders.meal_id
GROUP BY meals.meal_id
), 
 cost AS
(
SELECT 
	meals.meal_id,
	SUM(meal_cost * stocked_quantity) AS
	cost
FROM meals
	JOIN stock ON meals.meal_id = stock.meal_id
GROUP BY meals.meal_id )

SELECT 
	revenue.meal_id,
	revenue,
	cost,
	revenue - cost AS profit
FROM revenue 
JOIN cost ON revenue.meal_id = cost.meal_id
ORDER BY profit DESC
LIMIT 3;



LETS Practice
———————


Profit per eatery


WITH revenue AS (
  -- Calculate revenue per eatery
  SELECT eatery,
         SUM(meal_price * order_quantity) AS revenue
    FROM meals
    JOIN orders ON meals.meal_id = orders.meal_id
   GROUP BY eatery),

  cost AS (
  -- Calculate cost per eatery
  SELECT eatery,
         SUM(meal_cost * stocked_quantity) AS cost
    FROM meals
    JOIN stock ON meals.meal_id = stock.meal_id
   GROUP BY eatery)

   -- Calculate profit per eatery
   SELECT revenue.eatery,
          revenue - cost AS profit
     FROM revenue
     JOIN cost ON revenue.eatery = cost.eatery
    ORDER BY profit DESC;





Profit per month

-- Set up the revenue CTE
WITH revenue AS ( 
    SELECT
        DATE_TRUNC('month', order_date) :: DATE AS delivr_month,
        SUM(meal_price * order_quantity) AS revenue
    FROM meals
    JOIN orders ON meals.meal_id = orders.meal_id
    GROUP BY delivr_month),
-- Set up the cost CTE
  cost AS (
    SELECT
        DATE_TRUNC('month', stocking_date) :: DATE AS delivr_month,
        SUM(meal_cost * stocked_quantity) AS cost
    FROM meals
    JOIN stock ON meals.meal_id = stock.meal_id
    GROUP BY delivr_month)
-- Calculate profit by joining the CTEs
SELECT
    revenue.delivr_month,
    revenue - cost AS profit
FROM revenue
JOIN cost ON revenue.delivr_month = cost.delivr_month
ORDER BY revenue.delivr_month ASC;




