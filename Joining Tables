Joining Tables


Inner Join 


￼

SELECT
	album_id,
	title,
	album.artist_id,
	name AS artist_name
FROM album
INNER JOIN artist ON artist.artist_id = album.artist_id
WHERE album.artist_id = 1;
 

INNER JOIN SYNTAX 
SELECT
	table_A.columnX,
	table_A.columnY,
	table_B.columnZ
FROM table_A
INNER JOIN table_B ON table_A.foreign_key = table_B.primary_key;

 Multiple INNER JOINS
————————————

SELECT 
	table_A.columnX,
	table_A.columnY,
	table_B.columnZ, table_c.columnW
FROM table_A
INNER JOIN table_B ON table_B.foreign_key = table_A.primary_key
INNER JOIN table_C ON table_C.foreign_key = 
table.B.primary_key;



LETS PRACTICE —————————

INNER JOINs 

SELECT 
  track_id,
  name AS track_name,
  title AS album_title
FROM track
  -- Complete the join type and the common joining column
INNER JOIN album on track.album_id = album.album_id;





-- Select album_id and title from album, and name from artist
SELECT 
  album_id,
  title,
  name AS artist
  -- Enter the main source table name
FROM album
  -- Perform the inner join
INNER JOIN artist on album.artist_id = artist.artist_id;






Inner Join (III) - Join 3 tables

SELECT track_id,
-- Enter the correct table name prefix when retrieving the name column from the track table
  track.name AS track_name,
  title as album_title,
  -- Enter the correct table name prefix when retrieving the name column from the artist table
  artist.name AS artist_name
FROM track
  -- Complete the matching columns to join album with track, and artist with album
INNER JOIN album on track.album_id = album.album_id 
INNER JOIN artist on album.artist_id = artist.artist_id;








LEFT & RIGHT JOIN 
———————————

Syntax
SELECT 
	Admitted.Patient_ID,
	Admitted,
	Discharged
FROM Admitted
LEFT JOIN Discharged ON Discharged.Patient_ID = Admitted.Patient_ID




RIGHT JOIN
SELECT
	Admitted.Patient_ID,
	Admitted,
	Discharged
FROM Discharged
RIGHT JOIN Admitted on Admitted.Patient_ID = Discharged.Patient_ID;




Inner Join will only return the matching rows from both the tables

LEFT or RIGHT Join will return all rows from the main table plus matches from the joining table.

NULL comes in the left or right
left and right are interchangeable


￼





LETS PRACTICE
————————


SELECT 
  invoiceline_id,
  unit_price, 
  quantity,
  billing_state
  -- Specify the source table
FROM invoiceline
  -- Complete the join to the invoice table
LEFT JOIN invoice
ON invoiceline.invoice_id = invoice.invoice_id;





-- SELECT the fully qualified album_id column from the album table
SELECT 
  album.album_id,
  title,
  album.artist_id,
  -- SELECT the fully qualified name column from the artist table
  artist.name as artist
FROM album
-- Perform a join to return only rows that match from both tables
INNER JOIN artist ON album.artist_id = artist.artist_id
WHERE album.album_id IN (213,214)




SELECT 
  album.album_id,
  title,
  album.artist_id,
  artist.name as artist
FROM album
INNER JOIN artist ON album.artist_id = artist.artist_id
-- Perform the correct join type to return matches or NULLS from the track table
RIGHT JOIN track on album.album_id = track.album_id
WHERE album.album_id IN (213,214)





UNION & UNION ALL



When we are required to combine in a single result data

Combining results


Combining results
—————————

SELECT
	album_id,
	title,
	artist_id
FROM album
WHERE artist_id IN(1,3)
UNION
SELECT
	album_id,
	titile,
	artist_id
FROM album
WHERE artist_id IN (1, 4, 5);

UNION excludes duplicate rows and 
￼
——————————————



UNION ALL
——

SELECT
	album_id,
	title,
	artist_id
FROM album
WHERE artist_id IN(1,3)
UNION ALL
SELECT
	album_id,
	titile,
	artist_id
FROM album
WHERE artist_id IN (1, 4, 5);	
￼


Included duplicate rows

——
Creating new column names for final results
—————
|

SELECT
	album_id AS ALBUM_ID,
	title AS ALBUM_TITLE,
	artist_id AS ARTIST_ID
FROM album
WHERE artist_id IN (1, 3)
UNION ALL
SELECT
	album_id AS ALBUM_ID,
	title AS ALBUM_TITLE,
	artist_id AS ARTIST_ID
FROM album
WHERE artist_id IN(1, 4, 5);




LETS PRACTICE
—————————
SELECT 
  album_id AS ID,
  title AS description,
  'Album' AS Source
  -- Complete the FROM statement
FROM album
 -- Combine the result set using the relevant keyword
UNION
SELECT 
  artist_id AS ID,
  name AS description,
  'Artist'  AS Source
  -- Complete the FROM statement
FROM  artist;

